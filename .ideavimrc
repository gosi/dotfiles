""" Settings to behave as similar as possible to spacemacs defaults

" <SPC> as the leader key
let mapleader = " "

" Show current vim mode
set showmode

" Use the clipboard register '*' for all yank, delete, change and put operations
" which would normally go to the unnamed register.
set clipboard+=unnamed

" Search as characters are entered
set incsearch

" Highlight search results
set hlsearch

" If a pattern contains an uppercase letter, searching is case sensitive,
" otherwise, it is not.
set ignorecase
set smartcase

" Emulate vim-surround. Commands: ys, cs, ds, S.
set surround

" Y should yank to EOL
map Y y$

" keep selection when indenting text
vnoremap < <gv
vnoremap > >gv

" play a macro recorded to register q
nnoremap Q @q

" center screen on search result
nnoremap n nzz
nnoremap N Nzz

" move by screen line instead of file line
nnoremap j gj
nnoremap k gk

" tab for next matching item
nnoremap <tab> %
vnoremap <tab> %

" emacs-like editing in insert mode
inoremap <C-a> <Home>
inoremap <C-b> <Left>
inoremap <C-e> <End>
inoremap <C-f> <Right>
inoremap <C-k> <Esc>lDa

" Show TODOs
nnoremap <leader>aot    :action ActivateTODOToolWindow<CR>
vnoremap <leader>aot    <Esc>:action ActivateTODOToolWindow<CR>

" Switch among recently opened files
nnoremap <leader>bb    :action RecentFiles<CR>
vnoremap <leader>bb    <Esc>:action RecentFiles<CR>

" Close current tab
nnoremap <leader>bd    :action CloseContent<CR>
vnoremap <leader>bd    <Esc>:action CloseContent<CR>

" Show event log
nnoremap <leader>bm    :action ActivateEventLogToolWindow<CR>
vnoremap <leader>bm    <Esc>:action ActivateEventLogToolWindow<CR>

" Next Tab
nnoremap <leader>bn    :action NextTab<CR>
vnoremap <leader>bn    <Esc>:action NextTab<CR>

" Substitute the whole content of the buffer with the content of your clipboard
nnoremap <leader>bP    ggVGp<CR>
vnoremap <leader>bP    <Esc>ggVGp<CR>

" Previous Tab
nnoremap <leader>bp    :action PreviousTab<CR>
vnoremap <leader>bp    <Esc>:action PreviousTab<CR>

" Open a new scratch buffer
nnoremap <leader>bs    :action NewScratchBuffer<CR>
vnoremap <leader>bs    <Esc>:action NewScratchBuffer<CR>

" Reopen last closed tab
nnoremap <leader>bu    :action ReopenClosedTab<CR>
vnoremap <leader>bu    <Esc>:action ReopenClosedTab<CR>

" Close a window together with its tabs
nnoremap <leader>bx    :action CloseAllEditors<CR>
vnoremap <leader>bx    <Esc>:action CloseAllEditors<CR>

" Copy whole buffer
nnoremap <leader>bY    :%y<CR>
vnoremap <leader>bY    <Esc>:%y<CR>

" Close other tabs in current window
nnoremap <leader>b<C-d>    :action CloseAllEditorsButActive<CR>
vnoremap <leader>b<C-d>    <Esc>:action CloseAllEditorsButActive<CR>

" Run project
nnoremap <leader>cr>    :action Run
vnoremap <leader>cr>    :action Run

" Compile selected file, package or module
nnoremap <leader>cC    :action Compile<CR>
vnoremap <leader>cC    <Esc>:action Compile<CR>

" Make project
nnoremap <leader>cc    :action CompileDirty<CR>
vnoremap <leader>cc    <Esc>:action CompileDirty<CR>

" Comment lines
nnoremap <leader>cl    :action CommentByLineComment<CR>
vnoremap <leader>cl    :action CommentByLineComment<CR>:action VimVisualExitMode<CR>

" Make module
nnoremap <leader>cm    :action MakeModule<CR>
vnoremap <leader>cm    <Esc>:action MakeModule<CR>

" Comment paragraph
nnoremap <leader>cp    vip<CR>:action CommentByLineComment<CR>:action VimVisualExitMode<CR>
vnoremap <leader>cp    <Esc>vip<CR>:action CommentByLineComment<CR>:action VimVisualExitMode<CR>

" Comment from begin of buffer up to current line
nnoremap <leader>ct    Vgg:action CommentByLineComment<CR>:action VimVisualExitMode<CR>
vnoremap <leader>ct    <Esc>Vgg:action CommentByLineComment<CR>:action VimVisualExitMode<CR>

" Copy and comment current line
nnoremap <leader>cy    yyP:action CommentByLineComment<CR>
vnoremap <leader>cy    <Esc>yyP:action CommentByLineComment<CR>

" List errors
nnoremap <leader>el    :action CodeInspection.OnEditor<CR>
vnoremap <leader>el    <Esc>:action CodeInspection.OnEditor<CR>

" Go to previous error
nnoremap <leader>eN    :action GotoPreviousError<CR>
vnoremap <leader>eN    <Esc>:action GotoPreviousError<CR>

" Go to next error
nnoremap <leader>en    :action GotoNextError<CR>
vnoremap <leader>en    <Esc>:action GotoNextError<CR>

" Go to previous error
nnoremap <leader>ep    :action GotoPreviousError<CR>
vnoremap <leader>ep    <Esc>:action GotoPreviousError<CR>

" Select inspection by name
nnoremap <leader>es    :action RunInspection<CR>
vnoremap <leader>es    <Esc>:action RunInspection<CR>

" Explain error at point
nnoremap <leader>ex    :action ShowErrorDescription<CR>
vnoremap <leader>ex    <Esc>:action ShowErrorDescription<CR>

" Show bookmarks.
" Create bookmark 0 with <C-S-0>, Create bookmark 1 with <C-S-1> and so on.
" Go to bookmark 0 with <C-0>, go to bookmark 1 with <C-1> and so on.
nnoremap <leader>fb    :action ShowBookmarks<CR>
vnoremap <leader>fb    <Esc>:action ShowBookmarks<CR>

" Show settings
nnoremap <leader>fed    :action ShowSettings<CR>
vnoremap <leader>fed    <Esc>:action ShowSettings<CR>

" Reload .ideavimrc
nnoremap <leader>feR    :source ~/.ideavimrc<CR>
vnoremap <leader>feR    <Esc>:source ~/.ideavimrc<CR>

" Find files
nnoremap <leader>ff    :action GotoFile<CR>
vnoremap <leader>ff    <Esc>:action GotoFile<CR>
nnoremap <leader>fF    :action GotoFile<CR>
vnoremap <leader>fF    <Esc>:action GotoFile<CR>

" Search in project
nnoremap <leader>fg    :action FindInPath<CR>
vnoremap <leader>fg    <Esc>:action FindInPath<CR>

" Rename file
nnoremap <leader>fR    :action RenameFile<CR>
vnoremap <leader>fR    <Esc>:action RenameFile<CR>

" Recent files
nnoremap <leader>fr    :action RecentFiles<CR>
vnoremap <leader>fr    <Esc>:action RecentFiles<CR>

" Save all files
nnoremap <leader>fS    :action SaveAll<CR>
vnoremap <leader>fS    <Esc>:action SaveAll<CR>

" Save single file (I think that Intellij autosaves anything by default anyway)
nnoremap <leader>fs    :action SaveDocument<CR>
vnoremap <leader>fs    <Esc>:action SaveDocument<CR>

" Focus on project window.
" Sadly when you are inside the project window this key binding does not work
" anymore. You can use <A-1> if you want to close the window or <Esc> if you
" want to leave the window opened and focus on the code.
nnoremap <leader>ft    :action ActivateProjectToolWindow<CR>
vnoremap <leader>ft    <Esc>:action ActivateProjectToolWindow<CR>

" Copy file path
nnoremap <leader>fyy    :action CopyPaths<CR>
vnoremap <leader>fyy    <Esc>:action CopyPaths<CR>

" Execute an action. Like <M-x>
nnoremap <leader><Space>    :action GotoAction<CR>
vnoremap <leader><Space>    <Esc>:action GotoAction<CR>

" Focus last buffer
nnoremap <leader><tab>    :action VimFilePrevious<CR>
vnoremap <leader><tab>    <Esc>:action VimFilePrevious<CR>

" Open the terminal window (use :! for a single shell cmd)
nnoremap <leader>'    :action Terminal.OpenInTerminal<CR>
vnoremap <leader>'    <Esc>:action Terminal.OpenInTerminal<CR>
nnoremap <leader>!    :action Terminal.OpenInTerminal<CR>
vnoremap <leader>!    <Esc>:action Terminal.OpenInTerminal<CR>

" Show usages for symbol.
" Ideally this should be FindInPath the current word, but I think that it is
" not possible.
nnoremap <leader>*    :action ShowUsages<CR>
vnoremap <leader>*    <Esc>:action ShowUsages<CR>

" Show key bindings
nnoremap <leader>?    :map<CR>
vnoremap <leader>?    <Esc>:map<CR>

" Comment lines
nnoremap <leader>;;    :action CommentByLineComment<CR>
vnoremap <leader>;     :action CommentByLineComment<CR>:action VimVisualExitMode<CR>

""" key bindings that do not have <leader> as first key

" Go to next change
nnoremap g,    :action JumpToNextChange<CR>
vnoremap g,    :action JumpToNextChange<CR>

" Go to last change
nnoremap g;    :action JumpToLastChange<CR>
vnoremap g;    :action JumpToLastChange<CR>

" Open all folds
nnoremap zr    :action ExpandAllRegions<CR>
vnoremap zr    :action ExpandAllRegions<CR>

" Collapse all regions
nnoremap zm    :action CollapseAllRegions<CR>
vnoremap zm    :action CollapseAllRegions<CR>

" Jump to previously visited location
nnoremap <c-i>    :action Forward<CR>

" Jump to lately visited location
nnoremap <c-o>    :action Back<CR>

" Open terminal in project root
nnoremap <leader>p!    :action ActivateTerminalToolWindow<CR>
vnoremap <leader>p!    <Esc>:action ActivateTerminalToolWindow<CR>

" Toggle between implementation file and its test file
nnoremap <leader>pa    :action GotoTest<CR>
vnoremap <leader>pa    <Esc>:action GotoTest<CR>

" Switch among recently opened files
nnoremap <leader>pb    :action RecentFiles<CR>
vnoremap <leader>pb    <Esc>:action RecentFiles<CR>
nnoremap <leader>ph    :action RecentFiles<CR>
vnoremap <leader>ph    <Esc>:action RecentFiles<CR>
nnoremap <leader>pr    :action RecentFiles<CR>
vnoremap <leader>pr    <Esc>:action RecentFiles<CR>

" Make project
nnoremap <leader>pc    :action CompileDirty<CR>
vnoremap <leader>pc    <Esc>:action CompileDirty<CR>

" Focus on project window.
" Sadly when you are inside the project window this key binding does not work
" anymore. You can use <A-1> if you want to close the window or <Esc> if you
" want to leave the window opened and focus on the code.
nnoremap <leader>pD    :action ActivateProjectToolWindow<CR>
vnoremap <leader>pD    <Esc>:action ActivateProjectToolWindow<CR>
nnoremap <leader>pt    :action ActivateProjectToolWindow<CR>
vnoremap <leader>pt    <Esc>:action ActivateProjectToolWindow<CR>

" Find files
nnoremap <leader>pf    :action GotoFile<CR>
vnoremap <leader>pf    <Esc>:action GotoFile<CR>

" Invalidate cache
nnoremap <leader>pI    :action InvalidateCaches<CR>
vnoremap <leader>pI    <Esc>:action InvalidateCaches<CR>

" Recent projects
nnoremap <leader>pp    :action ManageRecentProjects<CR>
vnoremap <leader>pp    <Esc>:action ManageRecentProjects<CR>

" Replace in path
nnoremap <leader>pR    :action ReplaceInPath<CR>
vnoremap <leader>pR    <Esc>:action ReplaceInPath<CR>

" Rerun tests
nnoremap <leader>pT    :action RerunTests<CR>
vnoremap <leader>pT    <Esc>:action RerunTests<CR>

" Show local changes (git status)
nnoremap <leader>pv    :action Vcs.Show.Local.Changes<CR>
vnoremap <leader>pv    <Esc>:action Vcs.Show.Local.Changes<CR>

" Clear search highlights.
nnoremap <leader>sc    :nohlsearch<CR>
vnoremap <leader>sc    <Esc>:nohlsearch<CR>

" Highlight current symbol. Do it again to toggle highlight.
nnoremap <leader>sh    :action HighlightUsagesInFile<CR>
vnoremap <leader>sh    <Esc>:action HighlightUsagesInFile<CR>

" Find usages
nnoremap <leader>sP    :action FindUsages<CR>
vnoremap <leader>sP    <Esc>:action FindUsages<CR>

" Search in project. Unfortunately <leader>/ does not work.
nnoremap <leader>sp    :action FindInPath<CR>
vnoremap <leader>sp    <Esc>:action FindInPath<CR>
nnoremap <leader>sl    :action FindInPath<CR>
vnoremap <leader>sl    <Esc>:action FindInPath<CR>

" Search everywhere
nnoremap <leader>ss    :action SearchEverywhere<CR>
vnoremap <leader>ss    <Esc>:action SearchEverywhere<CR>

" Toggle distraction free mode
nnoremap <leader>Tt    :action ToggleDistractionFreeMode<CR>
vnoremap <leader>Tt    <Esc>:action ToggleDistractionFreeMode<CR>

" View Breakpoints
nnoremap <leader>mdB    :action ViewBreakpoints<CR>
vnoremap <leader>mdB    <Esc>:action ViewBreakpoints<CR>

" Toggle breakpoint
nnoremap <leader>mdb    :action ToggleLineBreakpoint<CR>
vnoremap <leader>mdb    <Esc>:action ToggleLineBreakpoint<CR>

" Clear all breakpoints
nnoremap <leader>mdC    :action Debugger.RemoveAllBreakpointsInFile<CR>
vnoremap <leader>mdC    <Esc>:action Debugger.RemoveAllBreakpointsInFile<CR>

" Continue (Go to next breakpoint). 'c' is the same as gdb.
nnoremap <leader>mdc    :action Resume<CR>
vnoremap <leader>mdc    <Esc>:action Resume<CR>

" Debug class
nnoremap <leader>mdD    :action DebugClass<CR>
vnoremap <leader>mdD    <Esc>:action DebugClass<CR>

" Debug
nnoremap <leader>mdd    :action Debug<CR>
vnoremap <leader>mdd    <Esc>:action Debug<CR>

" Next (Step over). 's' is the same as gdb
nnoremap <leader>mdn    :action StepOver<CR>
vnoremap <leader>mdn    <Esc>:action StepOver<CR>

" Step out (same as "finish" in gdb).
nnoremap <leader>mdo    :action StepOut<CR>
vnoremap <leader>mdo    <Esc>:action StepOut<CR>

" Select configuration and debug
nnoremap <leader>mdr    :action ChooseDebugConfiguration<CR>
vnoremap <leader>mdr    <Esc>:action ChooseDebugConfiguration<CR>

" Step (Step into). 's' is the same as gdb.
nnoremap <leader>mds    :action StepInto<CR>
vnoremap <leader>mds    <Esc>:action StepInto<CR>

" Go to declaration
nnoremap <leader>mgg    :action GotoDeclaration<CR>
vnoremap <leader>mgg    <Esc>:action GotoDeclaration<CR>

" Go to implementation
nnoremap <leader>mgi    :action GotoImplementation<CR>
vnoremap <leader>mgi    <Esc>:action GotoImplementation<CR>

" Go to type declaration
nnoremap <leader>mgt    :action GotoTypeDeclaration<CR>
vnoremap <leader>mgt    <Esc>:action GotoTypeDeclaration<CR>

" Go to code block start
nnoremap <leader>mg[    :action EditorCodeBlockStart<CR>
vnoremap <leader>mg[    <Esc>:action EditorCodeBlockStart<CR>

" Go to code block end
nnoremap <leader>mg]    :action EditorCodeBlockEnd<CR>
vnoremap <leader>mg]    <Esc>:action EditorCodeBlockEnd<CR>

" Code cleanup
nnoremap <leader>mrC      :action CodeCleanup<CR>
vnoremap <leader>mrC      <Esc>:action CodeCleanup<CR>

" Create constructor
nnoremap <leader>mrc      :action GenerateConstructor<CR>
vnoremap <leader>mrc      <Esc>:action GenerateConstructor<CR>

" Extract method
nnoremap <leader>mrem    :action ExtractMethod<CR>
vnoremap <leader>mrem    <Esc>:action ExtractMethod<CR>

" Extract superclass
nnoremap <leader>mres    :action ExtractSuperclass<CR>
vnoremap <leader>mres    <Esc>:action ExtractSuperclass<CR>

" Generate getter and setter
nnoremap <leader>mrG      :action GenerateGetterAndSetter<CR>
vnoremap <leader>mrG      <Esc>:action GenerateGetterAndSetter<CR>

" Select what to generate
nnoremap <leader>mrg      :action Generate<CR>
vnoremap <leader>mrg      <Esc>:action Generate<CR>

" Implement Methods
nnoremap <leader>mrI      :action ImplementMethods<CR>
vnoremap <leader>mrI      <Esc>:action ImplementMethods<CR>

" Optimize imports
nnoremap <leader>mri      :action OptimizeImports<CR>
vnoremap <leader>mri      <Esc>:action OptimizeImports<CR>

" Create a new Element.
nnoremap <leader>mrN      :action NewElement<CR>
vnoremap <leader>mrN      <Esc>:action NewElement<CR>

" Create a new class. You can also create enum, interface and more.
nnoremap <leader>mrn      :action NewClass<CR>
vnoremap <leader>mrn      <Esc>:action NewClass<CR>

" Choose a refactoring action
nnoremap <leader>mrR      :action Refactorings.QuickListPopupAction<CR>
vnoremap <leader>mrR      <Esc>:action Refactorings.QuickListPopupAction<CR>

" Rename symbol
nnoremap <leader>mrr      :action RenameElement<CR>
vnoremap <leader>mrr      <Esc>:action RenameElement<CR>
